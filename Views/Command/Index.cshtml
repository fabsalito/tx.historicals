@model sga.ViewModels.HistoricoComandosViewModel

@{
    ViewBag.Title = "Histórico de comandos";
    ViewBag.TitleToolbar = "Filtros para comandos";
    //ViewBag.Linea = "";
}

@section Styles{
<link href="@Url.Content("~/Content/jquery.dataTables/css/jquery.dataTablesTernium.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/jquery.dataTables/css/jquery.dataTables_themerollerTernium.css")" rel="stylesheet" type="text/css" />
}

@section Breadcrumb{
Histórico de comandos - <label id="lblLinea">@ViewBag.linea</label>
}

@section Toolbar{
<table>
    <tr>
        <td>
            <span class="titulo">Línea</span><br />
            <select id="ddlFiltroLinea" class="cmbStd cmbMediano inputContenido inputFocus" onchange="ActualizaComboSistema();" >
                @{
                    if (-1 == @ViewBag.idLinea)
                    {
                        <option value="-1">[Seleccionar]</option>
                    }
                    foreach (var item in @Model.lines)
                    {
                        <option value="@item.id_line">@item.line</option>
                    }
                }
            </select>
        </td>
        <td>
            <span class="titulo">Sistema</span><br />
            <select id="ddlFiltroSistema" class="cmbStd cmbMediano inputContenido inputFocus" >
                <option value="-1">Todos</option>
                @{
                    foreach (var item in @Model.sistemas)
                    {
                        <option value="@item.idPlc">@item.description</option>
                    }
                }
            </select>
        </td>

        <td>
            @*<span class="titulo">Nodo</span><br />
            <select id="ddlFiltroNodo" class="cmbStd cmbMediano inputContenido inputFocus" >
                <option value="-1">Todos</option>*@
                @{
                    @*foreach (var item in @Model.nodos)
                    {
                        <option value="@item.idNode">@item.description</option>
                    }*@
                }
            @*</select>*@
        </td>
    </tr>
    <tr>
        <td>
            <span class="titulo">Descripción</span><br />
            <input id="txtFiltroDescripcion" class="txtStd txtMediano" type="text" value="" />
        </td>

        <td>
            <span class="titulo">Dirección</span><br />
            <input id="txtFiltroDireccion" type="text" class="txtStd txtMediano" value="" />
        </td>

        <td>
            <span class="titulo">Código</span><br />
            <input id="txtFiltroCodigo" type="text" class="txtStd txtMediano" value="" />
        </td>
    </tr>

    <tr>
        <td colspan="3">
            <span class="titulo">Periodo de visualización</span><br />
            Desde
            <input type="text" id="txtFiltroDiaInicio" name="txtFiltroDiaInicio" class="txtStd" value="" style="width: 125px;" />
            Hasta
            <input type="text" id="txtFiltroDiaFin" name="txtFiltroDiaFin" class="txtStd" value="" style="width: 125px;" />
        </td>
    </tr>
</table>
}

@section ToolbarButtonRight{
<input id="btnFiltroComandos" class="botonFiltro botonPrincipal" type="button" value="Filtrar" onclick="FiltrarHistoricoComandos();" />
}

@section Content{

<div>
    <table id="historical">
        <thead>
            <tr>
                <th>[CODIGO] DESCRIPCIÓN</th>
                <th>TIEMPO ENVÍO</th>
                <th>TIEMPO ARRIBO</th>

                <th>DIRECCION</th>
                <th>VALOR</th>
                <th>USUARIO</th>
                <th>APLICAC.</th>
                <th>SISTEMA</th>
            </tr>
        </thead>
        <tbody>
            <tr>
			    <td colspan="8" ></td>
		    </tr>
        </tbody>
    </table>

</div>

<div id="divHiddens">
    <input id="hidIdLinea" value="@ViewBag.idLinea" type="hidden" />
    <input id="hidFiltroDescripcion" type="hidden" />
    <input id="hidFiltroSistema" type="hidden" />
    <input id="hidFiltroNode" type="hidden" />
    <input id="hidFiltroDireccion" type="hidden" />
    <input id="hidFiltroCodigo" type="hidden" />
    <input id="hidFiltroDiaInicio" type="hidden" />
    <input id="hidFiltroDiaFin" type="hidden" />

    <input id="hidUrlCommandInfo" type="hidden" value="@Url.Action("VerCommandInfo", "Command")" />
    <input id="hidUrlActualizaComboSistema" type="hidden" value="@Url.Action("ActualizaComboSistema", "Command")" />
</div>

<div id="divDialogCommandInfo" title="Información de comando" class="dialogGeneral" style="text-align: center;">

</div>
}

@section Scripts{
<script src="@Url.Content("~/Scripts/jquery.dataTables/jquery.dataTablesTernium.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.dataTables/jquery.dataTablesTerniumExt.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Historical/Commands.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.datatimepicker/jquery-ui-timepicker-addon.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {

        var date = new Date();

//        // modifica funcionamiento de recarga por ajax
//        $.fn.dataTableExt.oApi.fnReloadAjax = function (oSettings, sNewSource, fnCallback, bStandingRedraw) {
//            if (sNewSource !== undefined && sNewSource !== null) {
//                oSettings.sAjaxSource = sNewSource;
//            }

//            // Server-side processing should just call fnDraw
//            if (oSettings.oFeatures.bServerSide) {
//                this.fnDraw();
//                return;
//            }

//            this.oApi._fnProcessingDisplay(oSettings, true);
//            var that = this;
//            var iStart = oSettings._iDisplayStart;
//            var aData = [];

//            this.oApi._fnServerParams(oSettings, aData);

//            oSettings.fnServerData.call(oSettings.oInstance, oSettings.sAjaxSource, aData, function (json) {
//                /* Clear the old information from the table */
//                that.oApi._fnClearTable(oSettings);

//                /* Got the data - add it to the table */
//                var aData = (oSettings.sAjaxDataProp !== "") ?
//            that.oApi._fnGetObjectDataFn(oSettings.sAjaxDataProp)(json) : json;

//                for (var i = 0; i < aData.length; i++) {
//                    that.oApi._fnAddData(oSettings, aData[i]);
//                }

//                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

//                that.fnDraw();

//                if (bStandingRedraw === true) {
//                    oSettings._iDisplayStart = iStart;
//                    that.oApi._fnCalculateEnd(oSettings);
//                    that.fnDraw(false);
//                }

//                that.oApi._fnProcessingDisplay(oSettings, false);

//                /* Callback user function - for event handlers etc */
//                if (typeof fnCallback == 'function' && fnCallback !== null) {
//                    fnCallback(oSettings);
//                }
//            }, oSettings);
//        };

//        // cambia el funcionamiento de la búsqueda rápida para que tenga delay
//        $.fn.dataTableExt.oApi.fnSetFilteringDelay = function (oSettings, iDelay) {
//            var _that = this;

//            if (iDelay === undefined) {
//                iDelay = 250;
//            }

//            this.each(function (i) {
//                $.fn.dataTableExt.iApiIndex = i;
//                var 
//                    $this = this,
//                    oTimerId = null,
//                    sPreviousSearch = null,
//                    anControl = $('input', _that.fnSettings().aanFeatures.f);

//                anControl.unbind('keyup').bind('keyup', function () {
//                    var $$this = $this;

//                    if (sPreviousSearch === null || sPreviousSearch != anControl.val()) {
//                        window.clearTimeout(oTimerId);
//                        sPreviousSearch = anControl.val();
//                        oTimerId = window.setTimeout(function () {
//                            $.fn.dataTableExt.iApiIndex = i;
//                            _that.fnFilter(anControl.val());
//                        }, iDelay);
//                    }
//                });

//                return this;
//            });
//            return this;
//        };

        // solo lectura para los selectores de fecha
        $('#txtFiltroDiaInicio').attr('readonly', true);
        $('#txtFiltroDiaFin').attr('readonly', true);

        $('#txtFiltroDiaFin').datetimepicker({
            dateFormat: 'dd/mm/yy',
            timeFormat: 'HH:mm:ss',
            showOn: 'button',
            buttonImage: '@Url.Content("~/Content/calendar/images/calendar.png")',
            buttonImageOnly: true,
            onClose: function (dateText, inst) {
                if ($('#txtFiltroDiaInicio').val() !== '') {
                    var testStartDate = $('#txtFiltroDiaInicio').datetimepicker('getDate');
                    var testEndDate = $('#txtFiltroDiaFin').datetimepicker('getDate');
                    if (testStartDate > testEndDate) {
                        $('#txtFiltroDiaInicio').datetimepicker('setDate', testEndDate);
                    }
                }
                else {
                    $('#txtFiltroDiaInicio').val(dateText);
                }
            },
            onSelect: function (selectedDateTime) {
                $('#txtFiltroDiaInicio').datetimepicker('option', 'maxDate', $('#txtFiltroDiaFin').datetimepicker('getDate'));
            }
        });

        $('#txtFiltroDiaFin').datetimepicker('setDate', date);

        $('#txtFiltroDiaInicio').datetimepicker({
            dateFormat: 'dd/mm/yy',
            timeFormat: 'HH:mm:ss',
            showOn: 'button',
            buttonImage: '@Url.Content("~/Content/calendar/images/calendar.png")',
            buttonImageOnly: true,
            onClose: function (dateText, inst) {
                if ($('#txtFiltroDiaFin').val() !== '') {
                    var testStartDate = $('#txtFiltroDiaInicio').datetimepicker('getDate');
                    var testEndDate = $('#txtFiltroDiaFin').datetimepicker('getDate');
                    if (testStartDate > testEndDate) {
                        $('#txtFiltroDiaFin').datetimepicker('setDate', testStartDate);
                    }
                }
                else {
                    $('#txtFiltroDiaFin').val(dateText);
                }
            },
            onSelect: function (selectedDateTime) {
                $('#txtFiltroDiaFin').datetimepicker('option', 'minDate', $('#txtFiltroDiaInicio').datetimepicker('getDate'));
            }
        });
        $('#txtFiltroDiaInicio').datetimepicker('setDate', new Date(date.setMinutes(date.getMinutes() - 300)));

        // actualiza filtros
        ActualizaFiltroContainers();

        // implementa dataTable
        $('#historical').dataTable({
            "bProcessing": true,
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("List", "Command")',
            "bJQueryUI": false,
            "iDelay": 300,
            "bDeferRender": true,
            "bScrollInfinite": true,
            "bScrollCollapse": true,
            "iDisplayLength": 25,
            "bLengthChange": false,
            "aaSorting": [[1, 'desc']],
            "aoColumns": [
                { "sWidth": "30%", "sName": "description" },
                { "sWidth": "10%", "sName": "sendTime" },
                { "sWidth": "10%", "sName": "arriveTime" },
                { "sWidth": "10%", "sName": "address" },
                { "sWidth": "10%", "sName": "value" },
                { "sWidth": "10%", "sName": "user" },
                { "sWidth": "10%", "sName": "application" },
                { "sWidth": "10%", "sName": "system" },
                { "bSearchable": false, "bVisible": false, "sName": "sendTimeStamp" },
                { "bSearchable": false, "bVisible": false, "sName": "idCommand" }
            ],
//            "aoColumnDefs": [
//                { "bSearchable": false, "aTargets": [8,9] },
//                { "bVisible": false, "aTargets": [8,9] }
//            ],
            "oLanguage": {
                "sProcessing": "Procesando...",
                "sLengthMenu": "Mostrar _MENU_ registros",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "Ningún dato disponible en esta tabla",
                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                }
            },
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "cusIdLinea", "value": $("#hidIdLinea").val() },
                            { "name": "cusDescription", "value": $("#hidFiltroDescripcion").val() },
                            { "name": "cusDireccion", "value": $("#hidFiltroDireccion").val() },
                            { "name": "cusSistema", "value": $("#hidFiltroSistema").val() },
//                            { "name": "cusNode", "value": $("#hidFiltroNode").val() },
                            { "name": "cusNode", "value": -1 },
                            { "name": "cusInicio", "value": $("#hidFiltroDiaInicio").val() },
                            { "name": "cusFin", "value": $("#hidFiltroDiaFin").val() },
                            { "name": "cusCodigo", "value": $("#hidFiltroCodigo").val() });
            },
            "sScrollY": $('.content-header').height(),
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                // verifica si tiene que recortar texto y aplicar tooltip
                if ($('td:eq(0)', nRow).text().length > 35) {
                    // define title para tooltip
                    $('td:eq(0)', nRow).attr('title', '<b>Descripción: </b></br>' + aData[0]);
                    $('td:eq(0)', nRow).attr('class', 'Tooltip');

                    // recorta el texto
                    $('td:eq(0)', nRow).text($('td:eq(0)', nRow).text().substr(0, 35) + '...');

                    // define tooltip para la fila
                    $('td:eq(0)', nRow).tooltip({
                        show: {
                            effect: "slideDown",
                            delay: 250
                        },
                        hide: {
                            effect: "slideDown",
                            delay: 250
                        },
                        position: {
                            my: "left-50 center",
                            at: "right center"
                        }
                    });
                }

//                // asigna llamada al diálogo
//                $('td:eq(0)', nRow).on('click', function () {
//                    VerCommandInfo(aData[11], aData[2]);
//                });
            },
            "fnDrawCallback": function (oSettings) {
                dataTableRezize();
            }
        });

        // aplica mejoras en la respuesta del filtro rapido
        $('#historical').dataTable().fnSetFilteringDelay();

        // define dialogo para info de comando
        $("#divDialogCommandInfo").dialog({
            autoOpen: false,
            width: "50%",
            modal: true,
            height: "auto",
            resizable: false,
            show: "slow"
        });

    });
</script>
}