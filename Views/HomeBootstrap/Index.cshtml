@model sga.ViewModels.HistoricoAlarmasViewModel
           
@{
    ViewBag.Title = "Histórico de alarmas";
    ViewBag.TitleToolbar = "Filtros para alarmas";
}

@section Styles{
@*<link href="@Url.Content("~/Content/jquery.dataTables/css/jquery.dataTables.css")" rel="stylesheet" type="text/css" />*@
@*<link href="@Url.Content("~/Content/jquery.dataTables/css/jquery.dataTables_themeroller.css")" rel="stylesheet" type="text/css" />*@
<link href="@Url.Content("~/Content/jquery.dataTables/css/jquery.dataTables_bootstrap.css")" rel="stylesheet" type="text/css" />
}

@section Breadcrumb{
<p class="navbar-text">Histórico de alarmas > Tandem</p>
}

@section Toolbar{
<div class="divRow">
    <div class="divCol">
        <span class="titulo">Descripción</span><br />
        <input id="txtFiltroDescripcion" class="txtStd txtMediano" type="text" value="" />
    </div>

    <div class="divCol">
        <span class="titulo">Sistema</span><br />
        <select id="ddlFiltroSistema" class="cmbStd cmbMediano inputContenido inputFocus" >
            <option value="-1">Todos</option>
            @{
                foreach (var item in @Model.sistemas)
                {
                    <option value="@item.idPlc">@item.description</option>
                }
            }
        </select>
    </div>
        
    <div class="divCol">
        <span class="titulo">Dirección</span><br />
        <input id="txtFiltroDireccion" type="text" class="txtStd txtMediano" value="" />
    </div>

    <div class="divCol">
        <span class="titulo">Código</span><br />
        <input id="txtFiltroCodigo" type="text" class="txtStd txtMediano" value="" />
    </div>
</div>

<div class="divRow">
    <div class="divCol">
        <span class="titulo">Periodo de visualización</span><br />
        Desde
        <input type="text" id="txtFiltroDiaInicio" name="txtFiltroDiaInicio" class="txtStd" value="" style="width: 100px;" /> 
        hasta
        <input type="text" id="txtFiltroDiaFin" name="txtFiltroDiaFin" class="txtStd" value="" style="width: 100px;" />
    </div>

    <div class="divCol">
        <span class="titulo">Estados</span><br />
        <div class="divCol">
            <input type="checkbox" id="estadosChckBx1" name="estadosChckBx1"/><img alt="" class="ImageCheckbox" title="Ausentes no reconocidas" src="@Url.Content("~/Content/images/estados/est_rojo_m.gif")" />
        </div>
        <div class="divCol">
            <input type="checkbox" id="estadosChckBx2" name="estadosChckBx2"/><img alt="" class="ImageCheckbox" title="Presentes no reconocidas" src="@Url.Content("~/Content/images/estados/est_azul_m.gif")" />
        </div>
        <div class="divCol">
            <input type="checkbox" id="estadosChckBx3" name="estadosChckBx3"/><img alt="" class="ImageCheckbox" title="Presentes reconocidas" src="@Url.Content("~/Content/images/estados/est_verde_m.gif")" />
        </div>
    </div>

    <div class="divCol">
        <span class="titulo">Eventos</span><br />
        <input type="checkbox" id="eventosChckBx1" name="eventosChckBx1"/>
    </div>

        
</div>
}

@section ToolbarButtonRight{
<input id="btnFiltroAlarmas" class="botonFiltro botonPrincipal" type="button" value="Filtrar" onclick="FiltrarHistoricoAlarmas();" />
}

@section Content{

<table id="historical" cellpadding="0" cellspacing="0" border="0" class="datatable table table-striped table-bordered">
    <thead>
        <tr>
            <th>EST.</th>
            <th>DESCRIPCIÓN</th>
            <th>T. ON</th>
            <th>T. OFF</th>

            <th>ACEPTA.</th>
            <th>CANCELA.</th>
            <th>RECONOC.</th>

            <th>CAUSA</th>
        </tr>
    </thead>
    <tbody>
        <tr>
			<td colspan="7" ></td>
		</tr>
    </tbody>
</table>

<div id="divHiddens">
    <input id="hidFiltroDescripcion" type="hidden" />
    <input id="hidFiltroSistema" type="hidden" />
    <input id="hidFiltroDireccion" type="hidden" />
    <input id="hidFiltroCodigo" type="hidden" />
    <input id="hidFiltroDiaInicio" type="hidden" />
    <input id="hidFiltroDiaFin" type="hidden" />
    <input id="hidEstadosChckBx1" type="hidden" />
    <input id="hidEstadosChckBx2" type="hidden" />
    <input id="hidEstadosChckBx3" type="hidden" />
    <input id="hidEventosChckBx1" type="hidden" />
</div>
}

@section Scripts{
<script src="@Url.Content("~/Scripts/jquery.dataTables/jquery.dataTables.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.dataTables/jquery.dataTables_bootstrap.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/AlarmsHistorical/AlarmsHistorical.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {

        var today = new Date();
        var containerHeigth = $(window).height() - 200;
        //        var calcDataTableHeight = function () {
        //            return $(window).height() * 55 / 100 - 50;
        //        };

//        // modifica funcionamiento de recarga
//        $.fn.dataTableExt.oApi.fnReloadAjax = function (oSettings, sNewSource, fnCallback, bStandingRedraw) {
//            if (sNewSource !== undefined && sNewSource !== null) {
//                oSettings.sAjaxSource = sNewSource;
//            }

//            // Server-side processing should just call fnDraw
//            if (oSettings.oFeatures.bServerSide) {
//                this.fnDraw();
//                return;
//            }

//            this.oApi._fnProcessingDisplay(oSettings, true);
//            var that = this;
//            var iStart = oSettings._iDisplayStart;
//            var aData = [];

//            this.oApi._fnServerParams(oSettings, aData);

//            oSettings.fnServerData.call(oSettings.oInstance, oSettings.sAjaxSource, aData, function (json) {
//                /* Clear the old information from the table */
//                that.oApi._fnClearTable(oSettings);

//                /* Got the data - add it to the table */
//                var aData = (oSettings.sAjaxDataProp !== "") ?
//            that.oApi._fnGetObjectDataFn(oSettings.sAjaxDataProp)(json) : json;

//                for (var i = 0; i < aData.length; i++) {
//                    that.oApi._fnAddData(oSettings, aData[i]);
//                }

//                oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();

//                that.fnDraw();

//                if (bStandingRedraw === true) {
//                    oSettings._iDisplayStart = iStart;
//                    that.oApi._fnCalculateEnd(oSettings);
//                    that.fnDraw(false);
//                }

//                that.oApi._fnProcessingDisplay(oSettings, false);

//                /* Callback user function - for event handlers etc */
//                if (typeof fnCallback == 'function' && fnCallback !== null) {
//                    fnCallback(oSettings);
//                }
//            }, oSettings);
//        };

        // solo lectura para los selectores de fecha
        $('#txtFiltroDiaInicio').attr('readonly', true);
        $('#txtFiltroDiaFin').attr('readonly', true);

        // define datapicker dia inicio
        $("#txtFiltroDiaInicio").datepicker({
            showOn: "button",
            buttonImage: '@Url.Content("~/Content/calendar/images/calendar22.png")',
            buttonText: "Fecha Inicio",
            buttonImageOnly: true,
            dateFormat: 'dd/mm/yy',
            gotoCurrent: true,
            onSelect: function () {
                ActualizaFechasDatapicker();
            }
        });

        // define dia actual para el inicio
        $("#txtFiltroDiaInicio").datepicker('setDate', today);

        // define datapicker dia fin
        $("#txtFiltroDiaFin").datepicker({
            showOn: "button",
            buttonImage: '@Url.Content("~/Content/calendar/images/calendar22.png")',
            buttonText: "Fecha Fin",
            buttonImageOnly: true,
            dateFormat: 'dd/mm/yy'
        });

        // actualiza datos del datapicker
        ActualizaFechasDatapicker();

        // define dia actual para el inicio
        $("#txtFiltroDiaFin").datepicker('setDate', today);

        // actualiza filtros
        ActualizaFiltroContainers();

//        // implementa dataTable
//        $('#historical').dataTable({
//            "bProcessing": true,
//            "bServerSide": true,
//            "sAjaxSource": '@Url.Action("List", "Home")',
//            "bJQueryUI": false,
//            "sDom": "<'row'<'span8'l><'span8'f>r>t<'row'<'span8'i><'span8'p>>",
//            "sPaginationType": "bootstrap",
//            //"sPaginationType": "full_numbers",
//            //"aLengthMenu": [[5000, 10000, 15000, -1], [5000, 10000, 15000, "All"]],
//            "bDeferRender": true,
//            "bScrollInfinite": true,
//            "bScrollCollapse": true,
//            "iDisplayLength": 25,
//            "bLengthChange": false,
//            //"bPaginate": false,
//            "aoColumns": [
//                { "sWidth": "5%" },
//                { "sWidth": "30%" },
//                { "sWidth": "12%" },
//                { "sWidth": "12%" },
//                { "sWidth": "12%" },
//                { "sWidth": "12%" },
//                { "sWidth": "12%" },
//                { "sWidth": "5%" }
//            ],
//            "aoColumnDefs": [
//                { "bSearchable": false, "bVisible": false, "aTargets": [8] },
//                { "bVisible": false, "aTargets": [8] }
//            ],
//            "oLanguage": {
//                "sProcessing": "Procesando...",
//                "sLengthMenu": "Mostrar _MENU_ registros",
//                "sZeroRecords": "No se encontraron resultados",
//                "sEmptyTable": "Ningún dato disponible en esta tabla",
//                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
//                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
//                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
//                "sInfoPostFix": "",
//                "sSearch": "Buscar",
//                "sUrl": "",
//                "sInfoThousands": ",",
//                "sLoadingRecords": "Cargando...",
//                "oPaginate": {
//                    "sFirst": "Primero",
//                    "sLast": "Último",
//                    "sNext": "Siguiente",
//                    "sPrevious": "Anterior"
//                },
//                "oAria": {
//                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
//                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
//                }
//            },
//            "fnServerParams": function (aoData) {
//                aoData.push({ "name": "cusDescription", "value": $("#hidFiltroDescripcion").val() },
//                            { "name": "cusDireccion", "value": $("#hidFiltroDireccion").val() },
//                            { "name": "cusSistema", "value": $("#hidFiltroSistema").val() },
//                            { "name": "cusInicio", "value": $("#hidFiltroDiaInicio").val() },
//                            { "name": "cusFin", "value": $("#hidFiltroDiaFin").val() },
//                            { "name": "cusCodigo", "value": $("#hidFiltroCodigo").val() },
//                            { "name": "cusShowEvents", "value": $("#hidEventosChckBx1").val() },
//                            { "name": "cusShowAusNoRec", "value": $("#hidEstadosChckBx1").val() },
//                            { "name": "cusShowPreNoRec", "value": $("#hidEstadosChckBx2").val() },
//                            { "name": "cusShowPreRec", "value": $("#hidEstadosChckBx3").val() });
//            },
//            "sScrollY": "300px",
//            //"sScrollYInner": "100%",
//            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
//                // verifica si tiene que recortar texto y aplicar tooltip
//                if ($('td:eq(1)', nRow).text().length > 50) {
//                    // define title para tooltip
//                    $('td:eq(1)', nRow).attr('title', aData[1]);
//                    $('td:eq(1)', nRow).attr('class', 'Tooltip');

//                    // recorta el texto
//                    $('td:eq(1)', nRow).text($('td:eq(1)', nRow).text().substr(0, 50) + '...');

//                    // define tooltip para la fila
//                    $('td:eq(1)', nRow).tooltip({
//                        show: {
//                            effect: "slideDown",
//                            delay: 250
//                        },
//                        hide: {
//                            effect: "explode",
//                            delay: 250
//                        },
//                        position: {
//                            my: "left-50 center",
//                            at: "right center"
//                        }
//                    });
//                }

//                // imagen para ausentes no reconocidas
//                if ("" != aData[2] && "" != aData[3] && "" == aData[4]) {
//                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_rojo_m.gif")" />');
//                }

//                // imagen para presentes no reconocidas
//                if ("" != aData[2] && "" == aData[3] && "" == aData[4]) {
//                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_azul_m.gif")" />');
//                }

//                // imagen para persentes reconocidas
//                if ("" != aData[2] && "" == aData[3] && "" != aData[4]) {
//                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_verde_m.gif")" />');
//                }
//            }
//        });

		
        $('#historical').dataTable( {
            "bProcessing": true,
            "bServerSide": true,
            "sAjaxSource": '@Url.Action("List", "Home")',
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "cusDescription", "value": $("#hidFiltroDescripcion").val() },
                            { "name": "cusDireccion", "value": $("#hidFiltroDireccion").val() },
                            { "name": "cusSistema", "value": $("#hidFiltroSistema").val() },
                            { "name": "cusInicio", "value": $("#hidFiltroDiaInicio").val() },
                            { "name": "cusFin", "value": $("#hidFiltroDiaFin").val() },
                            { "name": "cusCodigo", "value": $("#hidFiltroCodigo").val() },
                            { "name": "cusShowEvents", "value": $("#hidEventosChckBx1").val() },
                            { "name": "cusShowAusNoRec", "value": $("#hidEstadosChckBx1").val() },
                            { "name": "cusShowPreNoRec", "value": $("#hidEstadosChckBx2").val() },
                            { "name": "cusShowPreRec", "value": $("#hidEstadosChckBx3").val() });
            },
            "aoColumnDefs": [
                { "bSearchable": false, "bVisible": false, "aTargets": [8] },
                { "bVisible": false, "aTargets": [8] }
            ],
            "oLanguage": {
                "sProcessing": "Procesando...",
                "sLengthMenu": "_MENU_ registros por página",
                "sZeroRecords": "No se encontraron resultados",
                "sEmptyTable": "Ningún dato disponible en esta tabla",
                "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                "sInfoPostFix": "",
                "sSearch": "Buscar",
                "sUrl": "",
                "sInfoThousands": ",",
                "sLoadingRecords": "Cargando...",
                "oPaginate": {
                    "sFirst": "Primero",
                    "sLast": "Último",
                    "sNext": "Siguiente",
                    "sPrevious": "Anterior"
                },
                "oAria": {
                    "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                    "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                }
            },
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                // verifica si tiene que recortar texto y aplicar tooltip
                if ($('td:eq(1)', nRow).text().length > 50) {
                    // define title para tooltip
                    $('td:eq(1)', nRow).attr('title', aData[1]);
                    $('td:eq(1)', nRow).attr('class', 'Tooltip');

                    // recorta el texto
                    $('td:eq(1)', nRow).text($('td:eq(1)', nRow).text().substr(0, 50) + '...');

                    // define tooltip para la fila
                    $('td:eq(1)', nRow).tooltip({
                        show: {
                            effect: "slideDown",
                            delay: 250
                        },
                        hide: {
                            effect: "explode",
                            delay: 250
                        },
                        position: {
                            my: "left-50 center",
                            at: "right center"
                        }
                    });
                }

                // imagen para ausentes no reconocidas
                if ("" != aData[2] && "" != aData[3] && "" == aData[4]) {
                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_rojo_m.gif")" />');
                }

                // imagen para presentes no reconocidas
                if ("" != aData[2] && "" == aData[3] && "" == aData[4]) {
                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_azul_m.gif")" />');
                }

                // imagen para persentes reconocidas
                if ("" != aData[2] && "" == aData[3] && "" != aData[4]) {
                    $('td:eq(0)', nRow).html('<img src="@Url.Content("~/Content/images/estados/est_verde_m.gif")" />');
                }
            },
            "sDom": "<'row'<'col-xs-6'l><'col-xs-6'f>r>t<'row'<'col-xs-6'i><'col-xs-6'p>>",
            "sPaginationType": "bs_two_button"
        } );
	

        // aplica switch on-off al checkbox de eventos
        $('#eventosChckBx1').iphoneStyle({
            checkedLabel: 'SI',
            uncheckedLabel: 'NO'
        });

        // aplica cool checkbox style a estados
        $('input#estadosChckBx1').prettyCheckable({
            color: "gray"
        });
        $('input#estadosChckBx2').prettyCheckable({
            color: "gray"
        });
        $('input#estadosChckBx3').prettyCheckable({
            color: "gray"
        });

        // implementa plugin tooltip
        $('.ImageCheckbox').tooltip({
            show: {
                effect: "slideDown",
                delay: 250
            },
            hide: {
                effect: "explode",
                delay: 250
            },
            position: {
                my: "left-50 bottom+20",
                at: "right bottom+20"
            }
        });

//        // implementa autocomplete para descripción
//        $("#txtFiltroDireccion").autocomplete({
//            source: "@Url.Action("DireccionAutocomplete", "Home")"
//        });
    });
</script>
}